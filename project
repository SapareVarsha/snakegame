import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.util.Random;

public class SnakeGame extends JPanel implements ActionListener {
    private static final int BOARD_WIDTH = 30;
    private static final int BOARD_HEIGHT = 20;
    private static final int TILE_SIZE = 20;
    private static final int DELAY = 100; // milliseconds

    private int[] snakeX = new int[BOARD_WIDTH * BOARD_HEIGHT];
    private int[] snakeY = new int[BOARD_WIDTH * BOARD_HEIGHT];
    private int snakeLength = 1;
    private int appleX;
    private int appleY;
    private boolean running = false;
    private boolean gameOver = false;
    private char direction = 'R'; // R - Right, L - Left, U - Up, D - Down

    public SnakeGame() {
        setPreferredSize(new Dimension(BOARD_WIDTH * TILE_SIZE, BOARD_HEIGHT * TILE_SIZE));
        setBackground(Color.BLACK);
        setFocusable(true);
        addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (!running) {
                    startGame();
                }
                switch (e.getKeyCode()) {
                    case KeyEvent.VK_LEFT:
                        if (direction != 'R') direction = 'L';
                        break;
                    case KeyEvent.VK_RIGHT:
                        if (direction != 'L') direction = 'R';
                        break;
                    case KeyEvent.VK_UP:
                        if (direction != 'D') direction = 'U';
                        break;
                    case KeyEvent.VK_DOWN:
                        if (direction != 'U') direction = 'D';
                        break;
                }
            }
        });
        initializeGame();
    }

    private void initializeGame() {
        snakeX[0] = BOARD_WIDTH / 2;
        snakeY[0] = BOARD_HEIGHT / 2;
        spawnApple();
    }

    private void startGame() {
        running = true;
        gameOver = false;
        snakeLength = 1;
        direction = 'R';
        initializeGame();
        new Thread(this::gameLoop).start();
    }

    private void gameLoop() {
        while (running) {
            if (!gameOver) {
                moveSnake();
                checkCollision();
                repaint();
            }
            try {
                Thread.sleep(DELAY);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }

    private void moveSnake() {
        for (int i = snakeLength; i > 0; i--) {
            snakeX[i] = snakeX[i - 1];
            snakeY[i] = snakeY[i - 1];
        }
        switch (direction) {
            case 'L':
                snakeX[0]--;
                break;
            case 'R':
                snakeX[0]++;
                break;
            case 'U':
                snakeY[0]--;
                break;
            case 'D':
                snakeY[0]++;
                break;
        }
    }

    private void checkCollision() {
        if (snakeX[0] == appleX && snakeY[0] == appleY) {
            snakeLength++;
            spawnApple();
        }
        if (snakeX[0] < 0 || snakeX[0] >= BOARD_WIDTH || snakeY[0] < 0 || snakeY[0] >= BOARD_HEIGHT) {
            gameOver = true;
            running = false;
        }
        for (int i = 1; i < snakeLength; i++) {
            if (snakeX[i] == snakeX[0] && snakeY[i] == snakeY[0]) {
                gameOver = true;
                running = false;
            }
        }
    }

    private void spawnApple() {
        Random random = new Random();
        appleX = random.nextInt(BOARD_WIDTH);
        appleY = random.nextInt(BOARD_HEIGHT);
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        if (running) {
            // Draw apple
            g.setColor(Color.RED);
            g.fillRect(appleX * TILE_SIZE, appleY * TILE_SIZE, TILE_SIZE, TILE_SIZE);

            // Draw snake
            for (int i = 0; i < snakeLength; i++) {
                if (i == 0) {
                    g.setColor(Color.GREEN); // Head of the snake
                } else {
                    g.setColor(Color.YELLOW); // Body of the snake
                }
                g.fillRect(snakeX[i] * TILE_SIZE, snakeY[i] * TILE_SIZE, TILE_SIZE, TILE_SIZE);
            }
        } else {
            gameOver(g);
        }
    }

    private void gameOver(Graphics g) {
        g.setColor(Color.WHITE);
        g.setFont(new Font("Arial", Font.BOLD, 40));
        g.drawString("Game Over!", BOARD_WIDTH * TILE_SIZE / 2 - 120, BOARD_HEIGHT * TILE_SIZE / 2 - 20);
        g.setFont(new Font("Arial", Font.PLAIN, 20));
        g.drawString("Press any key to restart", BOARD_WIDTH * TILE_SIZE / 2 - 120, BOARD_HEIGHT * TILE_SIZE / 2 + 20);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        repaint();
    }

    public static void main(String[] args) {
        JFrame frame = new JFrame("Snake Game");
        SnakeGame game = new SnakeGame();
        frame.add(game);
        frame.pack();
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }
}
